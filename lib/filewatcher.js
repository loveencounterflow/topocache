// Generated by CoffeeScript 1.11.1
(function() {
  var $, $async, CKD, CND, Crc32, D, PATH, TC, badge, debug, echo, get_monotimestamp, help, info, log, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/FILEWATCHER';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  CKD = require('chokidar');

  get_monotimestamp = require('./monotimestamp');

  Crc32 = require('sse4_crc32');

  TC = require('./main');

  D = require('pipedreams');

  $ = D.$, $async = D.$async;

  this.main = function() {
    var watcher;
    watcher = CKD.watch();
    watcher.add(PATH.resolve(__dirname, '..', 'test-data'));
    watcher.on('change', (function(_this) {
      return function(path, nfo) {
        return info(get_monotimestamp().toFixed(3), CND.steel('change:', path));
      };
    })(this));
    return null;
  };

  this.checksum_from_path = function(me, path, fallback, handler) {
    var arity, crc32, finished, input;
    switch (arity = arguments.length) {
      case 3:
        handler = fallback;
        fallback = void 0;
        break;
      case 4:
        null;
        break;
      default:
        throw new Error("expect 3 or 4 arguments, got " + arity);
    }
    crc32 = new Crc32.CRC32();
    finished = false;
    input = D.new_stream({
      path: path
    });
    input.on('error', function(error) {
      if (finished) {
        throw error;
      }
      finished = true;
      if (fallback !== void 0) {
        return handler(null, fallback);
      }
      return handler(error);
    });
    input.pipe($(function(data, send) {
      return crc32.update(data);
    })).pipe($('finish', (function(_this) {
      return function() {
        if (finished) {
          return;
        }
        finished = true;
        return handler(null, crc32.crc());
      };
    })(this)));
    return null;
  };

  if (module.parent == null) {
    this.main();
  }

}).call(this);

//# sourceMappingURL=filewatcher.js.map
