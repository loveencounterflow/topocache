// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FS, LTSORT, PATH, TC, badge, debug, echo, help, include, info, log, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    var byte_count, filename, i, len, ref, results, source_path, target_path;
    ref = FS.readdirSync(templates_home);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(test_data_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
      results.push(whisper("copied " + byte_count + " bytes\nfrom " + source_path + "\nto   " + target_path));
    }
    return results;
  };

  this._touch = function(path, handler) {

    /* TAINT must properly escape path unless you know what you're doing */
    return TC.HELPERS.shell("touch " + path, handler);
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._get_source = function(path) {
    return FS.readFileSync(path, {
      encoding: 'utf-8'
    });
  };

  this._require_file = function(path) {

    /* Inhibit caching: */
    delete require['cache'][path];
    return require(path);
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  this["create cache object"] = function(T, done) {
    var g, home;
    g = TC.new_cache();
    home = PATH.resolve(__dirname, '..');
    T.ok(g['stamper'] === TC.HELPERS.file_stamper);
    return done();
  };

  this["register file objects"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var boxed_chart, g;
        _this._procure_test_files();
        g = TC.new_cache();
        TC.register(g, 'test-data/f.coffee', 'test-data/f.js', 'bash:coffee -c test-data');
        boxed_chart = TC.get_boxed_chart(g);
        urge('55444', boxed_chart);
        urge('55444', '\n' + rpr((yield TC.fetch_boxed_trend(g, resume))));
        warn((yield TC.find_first_fault(g, resume)));
        urge((yield TC.find_faults(g, resume)));
        return done();
      };
    })(this));
  };

  this["find fault(s) (simple case)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var boxed_chart, boxed_trend, faults, first_fault, g, home;
        _this._procure_test_files();
        yield _this._touch(PATH.resolve(__dirname, '../test-data/f.coffee'), resume);
        g = TC.new_cache();
        home = PATH.resolve(__dirname, '..');
        TC.register(g, 'test-data/f.coffee', 'test-data/f.js', 'bash:coffee -c test-data');
        boxed_chart = TC.get_boxed_chart(g);
        boxed_trend = (yield TC.fetch_boxed_trend(g, resume));
        first_fault = (yield TC.find_first_fault(g, resume));
        faults = (yield TC.find_faults(g, resume));
        urge(JSON.stringify(boxed_chart));
        urge(JSON.stringify(boxed_trend));
        urge(JSON.stringify(first_fault));
        urge(JSON.stringify(faults));
        T.eq(boxed_chart, [["test-data/f.coffee"], ["test-data/f.js"]]);
        T.eq(boxed_trend, [["test-data/f.js"], ["test-data/f.coffee"]]);
        T.eq(first_fault, {
          "reference": "test-data/f.js",
          "comparison": "test-data/f.coffee",
          "fix": "bash:coffee -c test-data"
        });
        T.eq(faults, [
          {
            "reference": "test-data/f.js",
            "comparison": "test-data/f.coffee",
            "fix": "bash:coffee -c test-data"
          }
        ]);
        return done();
      };
    })(this));
  };

  this["fix fault(s) (simple case) (1)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var fault_2, fault_3, fix, fix_1, fix_2, g, home;
        _this._procure_test_files();
        yield _this._touch(PATH.resolve(__dirname, '../test-data/f.coffee'), resume);
        g = TC.new_cache();
        home = PATH.resolve(__dirname, '..');
        fix_1 = 'bash:coffee -c test-data';
        TC.register(g, 'test-data/f.coffee', 'test-data/f.js', fix_1);
        fault_2 = (yield TC.find_first_fault(g, resume));
        if (fault_2 != null) {
          fix_2 = fault_2['fix'];
        } else {
          fix_2 = void 0;
        }
        debug('76765', fault_2, fix_2);
        T.eq(fix_1, fix_2);
        if (fix_2 === fix_1) {
          fix = fix_2.replace(/^bash:\s*/, '');
          debug('33425', (yield TC.HELPERS.shell(fix, resume)));
          fault_3 = (yield TC.find_first_fault(g, resume));
          T.eq(fault_3, null);
        } else {
          T.fail("expected " + (rpr(fix_1)) + ", got " + (rpr(fix_2)));
        }
        return done();
      };
    })(this));
  };

  this["fix fault(s) (simple case) (2)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var fault_2, fix_1, g, protocol_1;
        _this._procure_test_files();
        yield _this._touch(PATH.resolve(__dirname, '../test-data/f.coffee'), resume);
        g = TC.new_cache();
        protocol_1 = 'bash';
        fix_1 = 'coffee -c test-data';
        TC.register(g, 'test-data/f.coffee', 'test-data/f.js', [protocol_1, fix_1]);
        fault_2 = (yield TC.find_first_fault(g, resume));
        return done();
      };
    })(this));
  };

  if (module.parent == null) {
    include = ["create cache object", "register file objects", "find fault(s) (simple case)", "fix fault(s) (simple case) (1)"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
