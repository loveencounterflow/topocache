// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FS, LTSORT, PATH, TC, badge, debug, echo, help, include, info, log, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    var byte_count, file_count, filename, i, len, ref, source_path, target_path;
    file_count = 0;
    ref = FS.readdirSync(templates_home);
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      file_count += +1;
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(test_data_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
    }
    return whisper("copied " + file_count + " files");
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._delay = function(handler) {
    return setTimeout(handler, 10);
  };

  this._get_source = function(path) {
    return FS.readFileSync(path, {
      encoding: 'utf-8'
    });
  };

  this._require_file = function(path) {

    /* Inhibit caching: */
    delete require['cache'][path];
    return require(path);
  };

  this._main = function() {
    return test(this, {
      'timeout': 5000
    });
  };

  this["create cache object"] = function(T, done) {
    var g, home;
    g = TC.new_cache();
    home = PATH.resolve(__dirname, '..');
    T.ok(g['stamper'] === TC.HELPERS.file_stamper);
    return done();
  };

  this["register file objects"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_chart, g, home;
        _this._procure_test_files();
        home = PATH.resolve(__dirname, '../test-data');
        g = TC.new_cache({
          home: home
        });
        TC.register(g, 'f.coffee', 'f.js', 'bash:coffee -c test-data');
        boxed_chart = TC.get_boxed_chart(g);
        urge('55444', boxed_chart);
        urge('55444', '\n' + rpr((yield TC.fetch_boxed_trend(g, resume))));
        warn((yield TC.find_first_fault(g, resume)));
        urge((yield TC.find_faults(g, resume)));
        return done();
      };
    })(this));
    return null;
  };

  this["find fault(s) (1)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_chart, boxed_trend, faults, first_fault, g, home;
        _this._procure_test_files();
        home = PATH.resolve(__dirname, '../test-data');
        g = TC.new_cache({
          home: home
        });
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        TC.register(g, 'f.coffee', 'f.js', 'bash:coffee -c test-data');
        boxed_chart = TC.get_boxed_chart(g);
        boxed_trend = (yield TC.fetch_boxed_trend(g, resume));
        first_fault = (yield TC.find_first_fault(g, resume));
        faults = (yield TC.find_faults(g, resume));
        urge(JSON.stringify(boxed_chart));
        urge(JSON.stringify(boxed_trend));
        urge(JSON.stringify(first_fault));
        urge(JSON.stringify(faults));
        T.eq(boxed_chart, [["f.coffee"], ["f.js"]]);
        T.eq(boxed_trend, [["f.js"], ["f.coffee"]]);
        T.eq(first_fault, {
          "cause": "f.coffee",
          "effect": "f.js",
          "fix": "bash:coffee -c test-data"
        });
        T.eq(faults, [
          {
            "cause": "f.coffee",
            "effect": "f.js",
            "fix": "bash:coffee -c test-data"
          }
        ]);
        return done();
      };
    })(this));
    return null;
  };

  this["find fault(s) (non-existent file)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var error, g, home;
        _this._procure_test_files();
        home = PATH.resolve(__dirname, '../test-data');
        g = TC.new_cache({
          home: home
        });
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        TC.register(g, 'f.coffee', 'no-such-file.js', 'bash:coffee -c test-data');
        try {
          yield TC.fetch_boxed_trend(g, resume);
        } catch (error1) {
          error = error1;
          debug(JSON.stringify(error['message']));
          T.eq(error['message'], "expected a number for timestamp of 'no-such-file.js', got null");
        }
        return done();
      };
    })(this));
    return null;
  };

  this["find single fault"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var fault_2, fault_3, fix, fix_1, fix_2, g, home, ref, stderr, stdout;
        _this._procure_test_files();
        home = PATH.resolve(__dirname, '../test-data');
        g = TC.new_cache({
          home: home
        });
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        fix_1 = 'bash:coffee -c .';
        TC.register(g, 'f.coffee', 'f.js', fix_1);
        fault_2 = (yield TC.find_first_fault(g, resume));
        if (fault_2 != null) {
          fix_2 = fault_2['fix'];
        } else {
          fix_2 = void 0;
        }
        T.eq(fix_1, fix_2);
        if (fix_2 === fix_1) {
          fix = fix_2.replace(/^bash:\s*/, '');
          ref = (yield TC.HELPERS.shell(g, fix, resume)), stderr = ref.stderr, stdout = ref.stdout;
          T.eq(stderr, '');
          T.eq(stdout, '');
          fault_3 = (yield TC.find_first_fault(g, resume));
          T.eq(fault_3, null);
        } else {
          T.fail("expected " + (rpr(fix_1)) + ", got " + (rpr(fix_2)));
        }
        return done();
      };
    })(this));
    return null;
  };

  this["find multiple faults"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_trend, fault, faults, fix_1, fix_2, g, i, j, k, len, len1, len2;
        g = TC.new_cache({
          home: PATH.resolve(__dirname, '../test-data')
        });
        _this._procure_test_files();
        fix_1 = 'bash:coffee -c f.coffee';
        fix_2 = 'bash:coffee -c g.coffee';
        TC.register(g, 'f.coffee', 'f.js', fix_1);
        TC.register(g, 'g.coffee', 'g.js', fix_2);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['f.coffee'], ['g.coffee'], ['f.js'], ['g.js']]);
        T.eq((yield TC.find_faults(g, resume)), []);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['g.coffee'], ['g.js'], ['f.js'], ['f.coffee']]);
        faults = (yield TC.find_faults(g, resume));
        T.eq(faults, [
          {
            "effect": "f.js",
            "cause": "f.coffee",
            "fix": "bash:coffee -c f.coffee"
          }
        ]);
        for (i = 0, len = faults.length; i < len; i++) {
          fault = faults[i];
          help(JSON.stringify(fault));
        }
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['g.js'], ['f.js'], ['f.coffee'], ['g.coffee']]);
        faults = (yield TC.find_faults(g, resume));
        T.eq(faults, [
          {
            "effect": "f.js",
            "cause": "f.coffee",
            "fix": "bash:coffee -c f.coffee"
          }, {
            "effect": "g.js",
            "cause": "g.coffee",
            "fix": "bash:coffee -c g.coffee"
          }
        ]);
        for (j = 0, len1 = faults.length; j < len1; j++) {
          fault = faults[j];
          help(JSON.stringify(fault));
        }
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['g.js'], ['f.js'], ['g.coffee'], ['f.coffee']]);
        for (k = 0, len2 = faults.length; k < len2; k++) {
          fault = faults[k];
          help(JSON.stringify(fault));
        }
        return done();
      };
    })(this));
    return null;
  };

  this["align multiple faults (1)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_trend, fault, faults, first_fault, fix, fix_1, fix_2, fix_count, g, i, j, len, len1, ref, ref1, stderr, stdout;
        g = TC.new_cache({
          home: PATH.resolve(__dirname, '../test-data')
        });
        _this._procure_test_files();
        fix_1 = 'coffee -c f.coffee';
        fix_2 = 'coffee -c g.coffee';
        TC.register(g, 'f.coffee', 'f.js', fix_1);
        TC.register(g, 'g.coffee', 'g.js', fix_2);
        TC.register(g, 'g.js', 'f.js', fix_1);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['f.coffee'], ['g.coffee'], ['f.js'], ['g.js']]);
        faults = (yield TC.find_faults(g, resume));
        debug('22122', JSON.stringify(faults));
        T.eq(faults, [
          {
            "effect": "f.js",
            "cause": "g.js",
            "fix": "coffee -c f.coffee"
          }
        ]);
        for (i = 0, len = faults.length; i < len; i++) {
          fault = faults[i];
          help(JSON.stringify(fault));
        }
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        faults = (yield TC.find_faults(g, resume));
        debug('22122', JSON.stringify(faults));
        T.eq(faults, [
          {
            "effect": "g.js",
            "cause": "g.coffee",
            "fix": "coffee -c g.coffee"
          }, {
            "effect": "f.js",
            "cause": "f.coffee",
            "fix": "coffee -c f.coffee"
          }, {
            "effect": "f.js",
            "cause": "g.js",
            "fix": "coffee -c f.coffee"
          }
        ]);
        first_fault = (yield TC.find_first_fault(g, resume));
        T.eq(first_fault, faults[0]);
        for (j = 0, len1 = faults.length; j < len1; j++) {
          fault = faults[j];
          help(JSON.stringify(fault));
        }
        fix_count = 0;
        while ((fault = (yield TC.find_first_fault(g, resume))) != null) {
          urge(fault);
          fix_count += +1;
          if (fix_count > 10) {
            T.fail("runaway loop?");
            break;
          }
          fix = fault.fix;
          ref = (yield TC.HELPERS.shell(g, fix, resume)), stdout = ref.stdout, stderr = ref.stderr;
          T.eq(stdout, '');
          T.eq(stderr, '');
          ref1 = (yield TC.HELPERS.shell(g, "ls -l -tr --full-time ./", resume)), stdout = ref1.stdout, stderr = ref1.stderr;
          help(stdout);
        }
        T.eq(fix_count, 2);
        info(TC.get_boxed_chart(g));
        help(g);
        return done();
      };
    })(this));
    return null;
  };

  this["align multiple faults (2)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_trend, g, ref, report, stderr, stdout;
        g = TC.new_cache({
          home: PATH.resolve(__dirname, '../test-data')
        });
        _this._procure_test_files();
        TC.register(g, 'f.coffee', 'f.js', ['shell', 'coffee -c f.coffee']);
        TC.register(g, 'g.coffee', 'g.js', ['shell', 'coffee -c g.coffee']);
        TC.register(g, 'g.js', 'f.js', ['shell', 'coffee -c f.coffee']);
        yield TC.HELPERS.touch(g, 'f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'f.coffee', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        debug('22122', JSON.stringify((yield TC.find_faults(g, resume))));
        debug('22122', JSON.stringify((yield TC.find_first_fault(g, resume))));
        report = (yield TC.align(g, resume));
        info(report);
        ref = (yield TC.HELPERS.shell(g, "ls -l -tr --full-time ./", resume)), stdout = ref.stdout, stderr = ref.stderr;
        help(stdout);
        return done();
      };
    })(this));
    return null;
  };

  this["toposort of fixes"] = function(T, done) {
    step((function(_this) {
      return function(resume) {
        var _, cause, effect, fix, fix_1, fix_2, fix_txt, fxg, g, ref, relation;
        g = TC.new_cache({
          home: PATH.resolve(__dirname, '../test-data')
        });
        fix_1 = ['bash', 'coffee -c f.coffee'];
        fix_2 = ['bash', 'coffee -c g.coffee'];
        TC.register(g, 'f.coffee', 'f.js', fix_1);
        TC.register(g, 'g.coffee', 'g.js', fix_2);
        TC.register(g, 'g.js', 'f.js', fix_1);
        info(TC.get_boxed_chart(g));
        fxg = TC.new_cache();
        ref = g['fixes'];
        for (_ in ref) {
          relation = ref[_];
          cause = relation.cause, effect = relation.effect, fix = relation.fix;
          whisper((rpr(cause)) + " >—— " + (rpr(fix)) + " ——> " + (rpr(effect)));
          fix_txt = CND.isa_text(fix) ? fix : JSON.stringify(fix);
          TC.register(fxg, cause, fix_txt);
          TC.register(fxg, fix_txt, effect);
        }
        urge(TC.get_boxed_chart(fxg));
        return done();
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    include = ["create cache object", "register file objects", "find fault(s) (1)", "find fault(s) (non-existent file)", "find single fault", "find multiple faults", "align multiple faults (1)", "align multiple faults (2)"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
