// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FS, LTSORT, PATH, TC, badge, debug, echo, help, include, info, keep_test_data_folders, log, mkdirp, rimraf, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  mkdirp = require('mkdirp');

  rimraf = require('rimraf');

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  keep_test_data_folders = false;

  keep_test_data_folders = true;

  this._prune = function() {
    var name, ref1, value;
    ref1 = this;
    for (name in ref1) {
      value = ref1[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function(target_home) {
    var R, byte_count, file_count, filename, i, len, ref1, should_remove_folder, source_path, target_path;
    file_count = 0;
    should_remove_folder = (target_home != null) && target_home !== '.';
    target_home = PATH.resolve(test_data_home, target_home != null ? target_home : '.');
    mkdirp.sync(target_home);
    ref1 = FS.readdirSync(templates_home);
    for (i = 0, len = ref1.length; i < len; i++) {
      filename = ref1[i];
      file_count += +1;
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(target_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
    }
    if (should_remove_folder) {
      whisper("created 1 folder");
    }
    whisper("copied " + file_count + " files");
    R = function() {
      if (keep_test_data_folders || !should_remove_folder) {
        return;
      }
      rimraf.sync(target_home);
      return whisper("removed 1 folder");
    };
    return R;
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._delay = function(handler) {
    return setTimeout(handler, 250);
  };

  this._get_source = function(path) {
    return FS.readFileSync(path, {
      encoding: 'utf-8'
    });
  };

  this._require_file = function(path) {

    /* Inhibit caching: */
    delete require['cache'][path];
    return require(path);
  };

  this._main = function() {
    return test(this, {
      'timeout': 5000
    });
  };

  this["create and use memo, topo objects"] = function(T, done) {
    var home, ref, remove_folder;
    home = 'create and use memo object';
    ref = PATH.join('test-data', home);
    remove_folder = this._procure_test_files(home);
    step((function(_this) {
      return function*(resume) {
        var memo, settings, topo;
        settings = {
          ref: ref,
          name: 'cache-example.json',
          globs: '*'
        };
        memo = (yield TC.create_memo(settings, resume));
        topo = TC.new_cache(memo);
        urge('00980', topo);
        T.ok(topo['memo'] === memo);
        debug('22110', TC.get_boxed_chart(topo));
        debug('22110', (yield TC.fetch_boxed_trend(topo, resume)));
        remove_folder();
        return done();
      };
    })(this));
    return null;
  };

  this["find fault(s) (1)"] = function(T, done) {
    var home, ref, remove_folder;
    home = 'find fault(s) (1)';
    ref = PATH.join('test-data', home);
    remove_folder = this._procure_test_files(home);
    help("ref is " + (rpr(ref)));
    step((function(_this) {
      return function*(resume) {
        var box, boxed_chart, boxed_trend, entry, faults, first_fault, g, i, j, key, len, len1, memo, path, protocol, ref1, settings;
        settings = {
          ref: ref,
          name: 'cache-example.json',
          globs: '*'
        };
        memo = (yield TC.create_memo(settings, resume));
        g = TC.new_cache(memo);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.FORGETMENOT.force_update(g['memo'], resume);
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', 'shell::coffee -c .');
        boxed_chart = TC.get_boxed_chart(g);
        boxed_trend = (yield TC.fetch_boxed_trend(g, resume));
        first_fault = (yield TC.find_first_fault(g, resume));
        faults = (yield TC.find_faults(g, resume));
        for (i = 0, len = boxed_trend.length; i < len; i++) {
          box = boxed_trend[i];
          for (j = 0, len1 = box.length; j < len1; j++) {
            key = box[j];
            ref1 = TC.split_key(g, key), protocol = ref1[0], path = ref1[1];
            entry = TC.FORGETMENOT._file_entry_from_path(g['memo'], path);
            info(entry['timestamp'], path);
          }
        }
        urge('boxed_chart: ', JSON.stringify(boxed_chart));
        urge('boxed_trend: ', JSON.stringify(boxed_trend));
        urge('first_fault: ', JSON.stringify(first_fault));
        urge('faults:      ', JSON.stringify(faults));
        return done();
      };
    })(this));
    return null;
  };

  this["find fault(s) (non-existent file)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var error, g, home;
        _this._procure_test_files();
        home = test_data_home;
        g = TC.new_cache({
          home: home
        });
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        TC.register_fix(g, 'file::f.coffee', 'file::no-such-file.js', 'shell::coffee -c test-data');
        try {
          yield TC.fetch_boxed_trend(g, resume);
        } catch (error1) {
          error = error1;
          debug(JSON.stringify(error['message']));
          T.eq(error['message'], "expected a number for timestamp of 'file::no-such-file.js', got null");
        }
        return done();
      };
    })(this));
    return null;
  };

  this["find single fault"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var fault_2, fault_3, fix, fix_1, fix_2, g, home, output;
        _this._procure_test_files();
        home = test_data_home;
        g = TC.new_cache({
          home: home
        });
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        fix_1 = 'shell::coffee -c .';
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', fix_1);
        fault_2 = (yield TC.find_first_fault(g, resume));
        if (fault_2 != null) {
          fix_2 = fault_2['fix'];
        } else {
          fix_2 = void 0;
        }
        T.eq(fix_1, fix_2);
        if (fix_2 === fix_1) {
          fix = fix_2.replace(/^shell::\s*/, '');
          output = (yield TC.HELPERS.shell(g, fix, resume));
          T.eq(output, '');
          fault_3 = (yield TC.find_first_fault(g, resume));
          T.eq(fault_3, null);
        } else {
          T.fail("expected " + (rpr(fix_1)) + ", got " + (rpr(fix_2)));
        }
        return done();
      };
    })(this));
    return null;
  };

  this["find multiple faults"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_trend, fault, faults, fix_1, fix_2, g, i, j, k, len, len1, len2;
        g = TC.new_cache({
          home: test_data_home
        });
        _this._procure_test_files();
        fix_1 = 'shell::coffee -c f.coffee';
        fix_2 = 'shell::coffee -c g.coffee';
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', fix_1);
        TC.register_fix(g, 'file::g.coffee', 'file::g.js', fix_2);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.js', resume);
        yield _this._delay(resume);
        urge('44300-1', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['file::f.coffee'], ['file::g.coffee'], ['file::f.js'], ['file::g.js']]);
        T.eq((yield TC.find_faults(g, resume)), []);
        yield TC.HELPERS.touch(g, 'file::g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        urge('44300-2', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['file::g.coffee'], ['file::g.js'], ['file::f.js'], ['file::f.coffee']]);
        faults = (yield TC.find_faults(g, resume));
        T.eq(faults, [
          {
            "effect": "file::f.js",
            "cause": "file::f.coffee",
            "fix": "shell::coffee -c f.coffee"
          }
        ]);
        for (i = 0, len = faults.length; i < len; i++) {
          fault = faults[i];
          help(JSON.stringify(fault));
        }
        yield TC.HELPERS.touch(g, 'file::g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.coffee', resume);
        yield _this._delay(resume);
        urge('44300-3', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['file::g.js'], ['file::f.js'], ['file::f.coffee'], ['file::g.coffee']]);
        faults = (yield TC.find_faults(g, resume));
        T.eq(faults, [
          {
            "cause": "file::f.coffee",
            "effect": "file::f.js",
            "fix": "shell::coffee -c f.coffee"
          }, {
            "cause": "file::g.coffee",
            "effect": "file::g.js",
            "fix": "shell::coffee -c g.coffee"
          }
        ]);
        for (j = 0, len1 = faults.length; j < len1; j++) {
          fault = faults[j];
          help(JSON.stringify(fault));
        }
        yield TC.HELPERS.touch(g, 'file::g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        urge('44300-4', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['file::g.js'], ['file::f.js'], ['file::g.coffee'], ['file::f.coffee']]);
        for (k = 0, len2 = faults.length; k < len2; k++) {
          fault = faults[k];
          help(JSON.stringify(fault));
        }
        return done();
      };
    })(this));
    return null;
  };

  this["align multiple faults (1)"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        var boxed_trend, command, fault, faults, first_fault, fix, fix_1, fix_2, fix_count, g, home, i, j, len, len1, output, protocol, ref1;
        home = test_data_home;
        g = TC.new_cache({
          home: home
        });
        _this._procure_test_files();
        fix_1 = 'shell::coffee -c f.coffee';
        fix_2 = 'shell::coffee -c g.coffee';
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', fix_1);
        TC.register_fix(g, 'file::g.coffee', 'file::g.js', fix_2);
        TC.register_fix(g, 'file::g.js', 'file::f.js', fix_1);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.js', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        T.eq(boxed_trend, [['file::f.coffee'], ['file::g.coffee'], ['file::f.js'], ['file::g.js']]);
        faults = (yield TC.find_faults(g, resume));
        debug('22122', JSON.stringify(faults));
        T.eq(faults, [
          {
            "cause": "file::g.js",
            "effect": "file::f.js",
            "fix": "shell::coffee -c f.coffee"
          }
        ]);
        for (i = 0, len = faults.length; i < len; i++) {
          fault = faults[i];
          help(JSON.stringify(fault));
        }
        yield TC.HELPERS.touch(g, 'file::f.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.js', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::g.coffee', resume);
        yield _this._delay(resume);
        yield TC.HELPERS.touch(g, 'file::f.coffee', resume);
        yield _this._delay(resume);
        urge('44300', boxed_trend = (yield TC.fetch_boxed_trend(g, resume)));
        faults = (yield TC.find_faults(g, resume));
        debug('22122', JSON.stringify(faults));
        T.eq(faults, [
          {
            "cause": "file::g.coffee",
            "effect": "file::g.js",
            "fix": "shell::coffee -c g.coffee"
          }, {
            "cause": "file::f.coffee",
            "effect": "file::f.js",
            "fix": "shell::coffee -c f.coffee"
          }, {
            "cause": "file::g.js",
            "effect": "file::f.js",
            "fix": "shell::coffee -c f.coffee"
          }
        ]);
        first_fault = (yield TC.find_first_fault(g, resume));
        T.eq(first_fault, faults[0]);
        for (j = 0, len1 = faults.length; j < len1; j++) {
          fault = faults[j];
          help(JSON.stringify(fault));
        }
        fix_count = 0;
        while ((fault = (yield TC.find_first_fault(g, resume))) != null) {
          urge(fault);
          fix_count += +1;
          if (fix_count > 10) {
            T.fail("runaway loop?");
            break;
          }
          fix = fault.fix;
          ref1 = TC.split_key(g, fix), protocol = ref1[0], command = ref1[1];
          if (protocol === 'shell') {
            output = (yield TC.HELPERS.shell(g, command, resume));
            T.eq(output, '');
          } else {
            T.fail("expected protocol to be 'shell', got " + (rpr(protocol)) + " from key " + (rpr(fail)));
          }
          help((yield TC.HELPERS.shell(g, "ls -l -tr ./", resume)));
        }
        T.eq(fix_count, 2);
        info(TC.get_boxed_chart(g));
        help(g);
        return done();
      };
    })(this));
    return null;
  };

  this["align multiple faults (2)"] = function(T, done) {
    step((function(_this) {
      return function(resume) {
        var g, home;
        home = test_data_home;
        g = TC.new_cache({
          home: home
        });
        return _this._procure_test_files();
      };
    })(this));
    return null;
  };

  this["fixes can be strings, lists"] = function(T, done) {
    step((function(_this) {
      return function(resume) {
        var fix, fixes, g, home, i, len;
        home = test_data_home;
        g = TC.new_cache({
          home: home
        });
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', ['shell', ['coffee', '-c', 'f.coffee']]);
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', ['shell', 'coffee -c g.coffee']);
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', 'shell::coffee -c g.coffee');
        fixes = [['shell', ['coffee', '-c', 'f.coffee']], ['shell', 'coffee -c g.coffee'], 'shell::coffee -c g.coffee'];
        for (i = 0, len = fixes.length; i < len; i++) {
          fix = fixes[i];
          urge(CND.orange(rpr(fix)), CND.steel(rpr("json::" + (JSON.stringify(fix)))));
        }
        return done();
      };
    })(this));
    return null;
  };

  this["toytrain demo"] = require('./toytrain-demo');

  this["catalog"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var catalog, catalog_json, catalog_path, g, home;
        home = test_data_home;
        g = TC.new_cache({
          home: home
        });
        TC.register_fix(g, 'x::foo', 'x::bar');
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', ['shell', ['coffee', '-c', 'f.coffee']]);
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', ['shell', 'coffee -c g.coffee']);
        TC.register_fix(g, 'file::f.coffee', 'file::f.js', 'shell::coffee -c g.coffee');
        TC.register_fix(g, 'file::this-file-doesnt-exist.txt', 'x::bar');
        TC.register_fix(g, 'file::a.json', 'x::bar');
        TC.register_fix(g, 'file::f.coffee', 'x::bar');
        TC.register_fix(g, 'file::f.js', 'x::bar');
        TC.register_fix(g, 'file::g.coffee', 'x::bar');
        TC.register_fix(g, 'file::g.js', 'x::bar');
        TC.register_fix(g, 'file::sims.txt', 'x::bar');
        TC.register_fix(g, 'file::variants-and-usages.txt', 'x::bar');
        catalog = (yield TC.FILEWATCHER.compile_catalog(g, resume));
        catalog_path = PATH.resolve(TC.FILEWATCHER._default_catalog_home, 'catalog.json');
        catalog_json = JSON.stringify(catalog, null, '  ');
        yield FS.writeFile(catalog_path, catalog_json, resume);
        return done();
      };
    })(this));
  };

  this["toposort of fixes"] = function(T, done) {
    throw new Error("test not ready");
    step((function(_this) {
      return function(resume) {
        var _, cause, effect, fix, fix_1, fix_2, fix_txt, fxg, g, ref1, relation;
        g = TC.new_cache({
          home: test_data_home
        });
        fix_1 = ['shell', 'coffee -c f.coffee'];
        fix_2 = ['shell', 'coffee -c g.coffee'];
        TC.register_fix(g, 'f.coffee', 'file::f.js', fix_1);
        TC.register_fix(g, 'file::g.coffee', 'file::g.js', fix_2);
        TC.register_fix(g, 'file::g.js', 'file::f.js', fix_1);
        info(TC.get_boxed_chart(g));
        fxg = TC.new_cache();
        ref1 = g['fixes'];
        for (_ in ref1) {
          relation = ref1[_];
          cause = relation.cause, effect = relation.effect, fix = relation.fix;
          whisper((rpr(cause)) + " >—— " + (rpr(fix)) + " ——> " + (rpr(effect)));
          fix_txt = CND.isa_text(fix) ? fix : JSON.stringify(fix);
          TC.register_fix(fxg, cause, fix_txt);
          TC.register_fix(fxg, fix_txt, effect);
        }
        urge(TC.get_boxed_chart(fxg));
        return done();
      };
    })(this));
    return null;
  };

  if (true) {
    include = ["create and use memo, topo objects", "find fault(s) (1)"];
    this._prune();
    this._main();
  }


  /*
    step ( resume ) ->
       * stamper = ( me, id, handler ) ->
       *   debug rpr id
       *   process.exit()
      #.......................................................................................................
      f = ->
        if ( R = TC.get graph, 'result of f()' )?
          whisper "result of f(): from cache"
          return R
        whisper "result of f(): computed"
        return TC.set graph, 'result of f()', 42 * 2
  
      #.......................................................................................................
       * stamper = TC.HELPERS.cache_stamper
       * graph   = TC.new_cache { stamper, }
      graph   = TC.new_cache()
      TC.register_fix graph, [ 'cache', 'definition of f', ], [ 'cache', 'result of f()', ], [ 'call', ( => TC.delete graph, 'result of f()' ), ]
      TC.register_change graph, 'definition of f'
      #.......................................................................................................
      debug 'trend:', yield TC.fetch_boxed_trend  graph, resume
      help  'faults:', yield TC.find_faults        graph, resume
      #.......................................................................................................
      urge graph[ 'store' ]
      urge graph[ 'store' ]
      #.......................................................................................................
      debug 'trend:', yield TC.fetch_boxed_trend  graph, resume
      help  'faults:', yield TC.find_faults        graph, resume
      #.......................................................................................................
      debug f()
      debug f()
      #.......................................................................................................
      debug 'trend:', yield TC.fetch_boxed_trend  graph, resume
      help  'faults:', yield TC.find_faults        graph, resume
      #.......................................................................................................
      TC.register_change graph, 'definition of f'
      #.......................................................................................................
      debug 'trend:', yield TC.fetch_boxed_trend  graph, resume
      help  'faults:', yield TC.find_faults        graph, resume
      #.......................................................................................................
      info yield TC.align graph, resume
      urge graph[ 'store' ]
      #.......................................................................................................
      debug f()
      debug f()
      #.......................................................................................................
      urge graph[ 'store' ]
   */

}).call(this);

//# sourceMappingURL=tests.js.map
