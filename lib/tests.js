// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FS, LTSORT, PATH, TC, badge, debug, echo, help, include, info, log, rpr, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  PATH = require('path');

  FS = require('fs');

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    debug(PATH.resolve(test_data_home, 'f.coffee'));
    return debug(PATH.resolve(templates_home, 'f.coffee'));
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    debug(source);
    return source.length;
  };

  this._main = function() {
    this._procure_test_files();
    return test(this, {
      'timeout': 3000
    });
  };

  this["create cache object"] = function(T, done) {
    var g;
    g = TC.new_cache();
    TC.URL.anchor(g, 'file', __dirname);
    T.eq(g['anchors']['file'], __dirname);
    return done();
  };

  if (module.parent == null) {
    include = ["create cache object"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
