// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FS, LTSORT, PATH, TC, badge, debug, echo, help, include, info, log, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    var byte_count, filename, i, len, ref, results, source_path, target_path;
    ref = FS.readdirSync(templates_home);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(test_data_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
      results.push(whisper("copied " + byte_count + " bytes\nfrom " + source_path + "\nto   " + target_path));
    }
    return results;
  };

  this._touch = function(path, handler) {

    /* TAINT must properly escape path unless you know what you're doing */
    return TC._shell("touch " + path, handler);
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._get_source = function(path) {
    return FS.readFileSync(path, {
      encoding: 'utf-8'
    });
  };

  this._require_file = function(path) {

    /* Inhibit caching: */
    delete require['cache'][path];
    return require(path);
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  this["create cache object"] = function(T, done) {
    var g, home;
    g = TC.new_cache();
    home = PATH.resolve(__dirname, '..');
    TC.URL.set_anchor(g, 'file', home);
    T.eq(g['anchors']['file'], home);
    return done();
  };

  this["register file objects"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var boxed_chart, g, home, urls;
        _this._procure_test_files();
        g = TC.new_cache();
        home = PATH.resolve(__dirname, '..');
        TC.URL.set_anchor(g, 'file', home);
        urls = {
          f_coffee: TC.URL.join(g, 'file', 'test-data/f.coffee'),
          f_js: TC.URL.join(g, 'file', 'test-data/f.js')
        };
        TC.register(g, urls.f_coffee, urls.f_js, ['bash', 'coffee -c test-data']);
        boxed_chart = TC.get_boxed_chart(g);
        urge('55444', boxed_chart);
        urge('55444', '\n' + rpr((yield TC.fetch_boxed_trend(g, resume))));
        warn((yield TC.find_first_fault(g, resume)));
        urge((yield TC.find_faults(g, resume)));
        return done();
      };
    })(this));
  };

  this["can not set anchor after adding dependencies"] = function(T, done) {
    var g;
    g = TC.new_cache();
    TC.register(g, 'file:///test-data/f.coffee', 'file:///test-data/f.js', ['bash', 'coffee -c test-data']);
    T.throws("unable to set anchor after adding dependency", function() {
      return TC.URL.set_anchor(g, 'file', '/baz');
    });
    return done();
  };

  this["relative paths are roundtrip-invariant"] = function(T, done) {
    var anchor, g, i, is_absolute, len, path_1, path_2, probes, ref, rel_path;
    g = TC.new_cache();
    probes = [
      {
        anchor: '/somewhere',
        path_1: '/foo/bar/baz'
      }, {
        anchor: '/foo',
        path_1: '/foo/bar/baz'
      }, {
        anchor: '/baz',
        path_1: '/foo/bar/baz'
      }, {
        anchor: '/somewhere',
        path_1: 'foo/bar/baz'
      }, {
        anchor: '/foo',
        path_1: 'foo/bar/baz'
      }, {
        anchor: '/baz',
        path_1: 'foo/bar/baz'
      }
    ];
    for (i = 0, len = probes.length; i < len; i++) {
      ref = probes[i], anchor = ref.anchor, path_1 = ref.path_1;
      is_absolute = path_1.startsWith('/');
      rel_path = TC.URL._get_relative_path(null, anchor, path_1);
      path_2 = TC.URL._get_absolute_path(null, anchor, rel_path);
      if (!is_absolute) {
        path_2 = PATH.relative(anchor, path_2);
      }
      warn('77687', CND.red(path_1), CND.gold(anchor), CND.green(rel_path), CND.steel(path_2));
      T.eq(path_1, path_2);
    }
    return done();
  };

  this["file URLs are roundtrip-invariant"] = function(T, done) {
    var _, anchor, g, i, implicit_anchor, is_relative, len, matcher, path_1, path_2, probes, ref, ref1, url;
    implicit_anchor = PATH.resolve('.');
    probes = [
      {
        anchor: '/somewhere',
        path_1: 'foo'
      }, {
        anchor: '/somewhere',
        path_1: '/foo'
      }, {
        anchor: null,
        path_1: 'foo'
      }, {
        anchor: null,
        path_1: '/foo'
      }, {
        anchor: '/somewhere',
        path_1: '/foo/bar/baz'
      }, {
        anchor: '/foo',
        path_1: '/foo/bar/baz'
      }, {
        anchor: '/baz',
        path_1: '/foo/bar/baz'
      }, {
        anchor: '/somewhere',
        path_1: 'foo/bar/baz'
      }, {
        anchor: '/foo',
        path_1: 'foo/bar/baz'
      }, {
        anchor: '/baz',
        path_1: 'foo/bar/baz'
      }
    ];
    for (i = 0, len = probes.length; i < len; i++) {
      ref = probes[i], anchor = ref.anchor, path_1 = ref.path_1, matcher = ref.matcher;
      g = TC.new_cache();
      if (anchor != null) {
        TC.URL.set_anchor(g, 'file', anchor);
      }
      is_relative = !path_1.startsWith('/');
      url = TC.URL.join(g, 'file', path_1);
      ref1 = TC.URL.split(g, url), _ = ref1[0], path_2 = ref1[1];
      matcher = PATH.resolve(anchor != null ? anchor : implicit_anchor, path_1);
      warn('77687', CND.red(path_1), CND.gold(anchor), CND.green(url), CND.steel(path_2));
      T.eq(path_2, matcher);
    }
    return done();
  };

  this["only file URLs are relativized / absolutized"] = function(T, done) {
    var g, ref, ref1;
    g = TC.new_cache();
    if (typeof anchor !== "undefined" && anchor !== null) {
      TC.URL.set_anchor(g, 'file', anchor);
    }
    T.eq((ref = TC.URL).join.apply(ref, [g].concat(slice.call(['bash', 'coffee -c test-data']))), 'bash:///coffee -c test-data');
    T.eq(TC.URL.split(g, (ref1 = TC.URL).join.apply(ref1, [g].concat(slice.call(['bash', 'coffee -c test-data'])))), ['bash', 'coffee -c test-data']);
    return done();
  };

  this["find fault(s) (simple case)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var boxed_chart, boxed_trend, faults, first_fault, g, home, urls;
        _this._procure_test_files();
        yield _this._touch(PATH.resolve(__dirname, '../test-data/f.coffee'), resume);
        g = TC.new_cache();
        home = PATH.resolve(__dirname, '..');
        TC.URL.set_anchor(g, 'file', home);
        urls = {
          f_coffee: TC.URL.join(g, 'file', 'test-data/f.coffee'),
          f_js: TC.URL.join(g, 'file', 'test-data/f.js')
        };
        TC.register(g, urls.f_coffee, urls.f_js, ['bash', 'coffee -c test-data']);
        boxed_chart = TC.get_boxed_chart(g);
        boxed_trend = (yield TC.fetch_boxed_trend(g, resume));
        first_fault = (yield TC.find_first_fault(g, resume));
        faults = (yield TC.find_faults(g, resume));
        urge(JSON.stringify(boxed_chart));
        urge(JSON.stringify(boxed_trend));
        urge(JSON.stringify(first_fault));
        urge(JSON.stringify(faults));
        T.eq(boxed_chart, [["file:///test-data/f.coffee"], ["file:///test-data/f.js"]]);
        T.eq(boxed_trend, [["file:///test-data/f.js"], ["file:///test-data/f.coffee"]]);
        T.eq(first_fault, {
          "reference": "file:///test-data/f.js",
          "comparison": "file:///test-data/f.coffee",
          "fix": ["bash", "coffee -c test-data"]
        });
        T.eq(faults, [
          {
            "reference": "file:///test-data/f.js",
            "comparison": "file:///test-data/f.coffee",
            "fix": ["bash", "coffee -c test-data"]
          }
        ]);
        return done();
      };
    })(this));
  };

  this["fix fault(s) (simple case) (1)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var advice_1, advice_2, fault_2, fault_3, g, home, protocol_1, protocol_2, ref, ref1, urls;
        _this._procure_test_files();
        yield _this._touch(PATH.resolve(__dirname, '../test-data/f.coffee'), resume);
        g = TC.new_cache();
        home = PATH.resolve(__dirname, '..');
        TC.URL.set_anchor(g, 'file', home);
        urls = {
          f_coffee: TC.URL.join(g, 'file', 'test-data/f.coffee'),
          f_js: TC.URL.join(g, 'file', 'test-data/f.js')
        };
        protocol_1 = 'bash';
        advice_1 = 'coffee -c test-data';
        TC.register(g, urls.f_coffee, urls.f_js, [protocol_1, advice_1]);
        fault_2 = (yield TC.find_first_fault(g, resume));
        if (fault_2 != null) {
          ref = fault_2.fix, protocol_2 = ref[0], advice_2 = ref[1];
        } else {
          ref1 = [void 0, void 0], protocol_2 = ref1[0], advice_2 = ref1[1];
        }
        debug('76765', fault_2, protocol_2, advice_2);
        T.eq(protocol_1, protocol_2);
        T.eq(advice_1, advice_2);
        if (protocol_2 === protocol_1) {
          debug('33425', (yield TC._shell(advice_2, resume)));
          fault_3 = (yield TC.find_first_fault(g, resume));
          T.eq(fault_3, null);
        } else {
          T.fail("expected " + (rpr(protocol_1)) + ", got " + (rpr(protocol_2)));
        }
        return done();
      };
    })(this));
  };

  this["URL.is_url"] = function(T, done) {
    var i, len, matcher, probe, probes_and_matchers, ref;
    probes_and_matchers = [[null, false], ['', false], [['file', 'foo/bar'], false], ['foo/bar', false], ['file://foo/bar', true], ['file:///foo/bar', true], ['file:///~foo/bar', true], ['http://languagelog.ldc.upenn.edu/nll/?p=28689', true]];
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
      urge(CND.white(rpr(probe)), CND.truth(TC.URL.is_url(null, probe)));
      T.eq(TC.URL.is_url(null, probe), matcher);
    }
    return done();
  };

  this["URL.from"] = function(T, done) {
    var g, i, len, matcher, probe, probes_and_matchers, ref, ref1;
    g = TC.new_cache();
    probes_and_matchers = [[[''], null], [[['file', 'foo/bar']], null], [[['http', 'domain.com/foo/bar']], null], [['foo/bar'], null], [['file://foo/bar'], null], [['file:///foo/bar'], null], [['file:///~foo/bar'], null], [['http://languagelog.ldc.upenn.edu/nll/?p=28689'], null]];
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
      urge(CND.white(rpr(probe)), CND.gold(rpr((ref1 = TC.URL).from.apply(ref1, [g].concat(slice.call(probe))))));
    }
    return done();
  };

  this["fix fault(s) (simple case) (2)"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var advice_1, fault_2, g, protocol_1;
        _this._procure_test_files();
        yield _this._touch(PATH.resolve(__dirname, '../test-data/f.coffee'), resume);
        g = TC.new_cache();
        TC.URL.set_anchor(g, 'file', PATH.resolve(__dirname, '..'));
        protocol_1 = 'bash';
        advice_1 = 'coffee -c test-data';
        TC.register(g, 'test-data/f.coffee', 'test-data/f.js', [protocol_1, advice_1]);
        fault_2 = (yield TC.find_first_fault(g, resume));
        return done();
      };
    })(this));
  };

  if (module.parent == null) {
    include = ["create cache object", "register file objects", "can not set anchor after adding dependencies", "relative paths are roundtrip-invariant", "file URLs are roundtrip-invariant", "only file URLs are relativized / absolutized", "find fault(s) (simple case)", "fix fault(s) (simple case) (1)", "URL.is_url", "URL.from"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
