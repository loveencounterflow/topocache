// Generated by CoffeeScript 1.11.1
(function() {
  var CND, CP, FS, LTSORT, PATH, TC, badge, debug, echo, help, include, info, log, rpr, step, templates_home, test, test_data_home, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/TESTS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  PATH = require('path');

  FS = require('fs');

  step = require('coffeenode-suspend').step;

  test_data_home = PATH.resolve(__dirname, '../test-data');

  templates_home = PATH.resolve(test_data_home, 'templates');

  CP = require('child_process');

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._procure_test_files = function() {
    var byte_count, filename, i, len, ref, results, source_path, target_path;
    ref = FS.readdirSync(templates_home);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      source_path = PATH.resolve(templates_home, filename);
      target_path = PATH.resolve(test_data_home, filename);
      byte_count = this._copy_file_sync(source_path, target_path);
      results.push(whisper("copied " + byte_count + " bytes\nfrom " + source_path + "\nto   " + target_path));
    }
    return results;
  };

  this._copy_file_sync = function(source_path, target_path) {
    var source;
    FS.writeFileSync(target_path, source = FS.readFileSync(source_path));
    return source.length;
  };

  this._get_source = function(path) {
    return FS.readFileSync(path, {
      encoding: 'utf-8'
    });
  };

  this._require_file = function(path) {

    /* Inhibit caching: */
    delete require['cache'][path];
    return require(path);
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  this["create cache object"] = function(T, done) {
    var file_anchor, g, home;
    g = TC.new_cache();
    home = PATH.resolve(__dirname, '..');
    file_anchor = TC.URL.anchor(g, 'file', home);
    T.eq(g['anchors']['file'], home);
    T.eq(file_anchor, home);
    return done();
  };

  this["register file objects"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var boxed_chart, file_anchor, g, home, urls;
        _this._procure_test_files();
        g = TC.new_cache();
        home = PATH.resolve(__dirname, '..');
        file_anchor = TC.URL.anchor(g, 'file', home);
        urls = {
          f_coffee: TC.URL.join(g, 'test-data/f.coffee'),
          f_js: TC.URL.join(g, 'test-data/f.js')
        };
        TC.register(g, urls.f_coffee, urls.f_js, ['bash', 'coffee -c test-data']);
        boxed_chart = TC.get_boxed_chart(g);
        urge('55444', boxed_chart);
        urge('55444', '\n' + rpr((yield TC.fetch_boxed_trend(g, resume))));
        warn((yield TC.find_first_fault(g, resume)));
        urge((yield TC.find_faults(g, resume)));
        return done();
      };
    })(this));
  };

  if (module.parent == null) {
    include = ["create cache object", "register file objects"];
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
