// Generated by CoffeeScript 1.11.1
(function() {
  var $, $async, CND, D, PATH, alert, badge, debug, help, log, rpr, step, warn;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/STAMPERS';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  alert = CND.get_logger('alert', badge);

  PATH = require('path');

  D = require('pipedreams');

  $ = D.$, $async = D.$async;

  step = require('coffeenode-suspend').step;


  /* TAINT improve dispatching logic */


  /*
  @stamper = ( me, fix, handler ) ->
    try
      [ kind, command, ] = TC._kind_and_command_from_fix me, fix
    catch error
      return handler error
    switch kind
      when 'file'   then return @HELPERS.file_stamper   me, command, handler
      when 'cache'  then return @HELPERS.cache_stamper  me, command, handler
    handler new Error "unable to stamp entries of kind #{rpr kind}"
   */

  this.file = function(me, path, handler) {
    step((function(_this) {
      return function*(resume) {
        var Z, error, locator, stat;
        locator = PATH.resolve(me['home'], path);
        try {
          stat = (yield (require('fs')).stat(locator, resume));
          Z = +stat['mtime'];
        } catch (error1) {
          error = error1;
          if (error['code'] !== 'ENOENT') {
            throw error;
          }

          /* TAINT use special value to signal file missing */
          Z = -1;
        }
        return handler(null, Z);
      };
    })(this));
    return null;
  };

  this.cache = function(me, key, handler) {

    /* TAINT use special value to signal entry missing */
    setImmediate((function(_this) {
      return function() {
        var ref, ref1;
        return handler(null, (ref = (ref1 = TC.get_cache_entry(me, key)) != null ? ref1['t0'] : void 0) != null ? ref : -1);
      };
    })(this));
    return null;
  };

}).call(this);

//# sourceMappingURL=stampers.js.map
