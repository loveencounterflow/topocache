// Generated by CoffeeScript 1.11.1
(function() {
  var CND, FS, LTSORT, TC, XXX, badge, debug, echo, help, info, log, main, resolve, rpr, step, test, urge, warn, whisper,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'TOPOCACHE/DEMO';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  TC = require('./main');

  LTSORT = require('ltsort');

  step = require('coffeenode-suspend').step;

  resolve = (require('path')).resolve;

  FS = {};

  FS._t = 1000;

  FS.cache = {};

  FS._now = function() {
    return this._t += +1;
  };

  FS.write = function(name, value) {
    var t;
    t = this._now();
    this.cache[name] = {
      t: t,
      value: value
    };
    return value;
  };

  FS.read = function(name) {
    var R;
    if ((R = FS.cache[name]) == null) {
      return void 0;
    }
    return R.value;
  };

  FS.read_json = function(name) {
    var error, json;
    json = this.read(name);
    try {
      return JSON.parse(json);
    } catch (error1) {
      error = error1;
      warn("invalid JSON for " + (rpr(name)) + ": " + (rpr(json)));
      throw error;
    }
  };

  FS.write_json = function(name, value) {
    return this.write(name, JSON.stringify(value));
  };

  FS.fetch_cache = function(handler) {
    setImmediate((function(_this) {
      return function() {
        return handler(null, _this.cache);
      };
    })(this));
    return null;
  };

  XXX = {};

  XXX.cmp = function(name_a, name_b) {
    var entry_a, entry_b;
    if ((entry_a = FS.cache[name_a]) == null) {
      throw new Error("unknown name " + (rpr(name_a)));
    }
    if ((entry_b = FS.cache[name_b]) == null) {
      throw new Error("unknown name " + (rpr(name_b)));
    }
    if (entry_a.t < entry_b.t) {
      return -1;
    }
    if (entry_a.t > entry_b.t) {
      return +1;
    }
    return 0;
  };

  XXX.test_cromulence = function() {
    var comparator, comparators, i, len, reference;
    reference = arguments[0], comparators = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    if (!(comparators.length > 0)) {
      throw new Error("need at least one comparator, got none");
    }
    for (i = 0, len = comparators.length; i < len; i++) {
      comparator = comparators[i];
      if ((this.cmp(reference, comparator)) < 0) {
        return false;
      }
    }
    return true;
  };

  main = function() {
    return step(function*(resume) {
      var g, paths, urls;
      paths = {
        f_coffee_template: 'test-data/f.template.coffee',
        f_coffee: 'test-data/f.coffee',
        f_js: 'test-data/f.js',
        a_json_template: 'test-data/a.remplate.json',
        a_json: 'test-data/a.json'
      };
      g = TC.new_cache();
      debug('50900', g);
      debug('44402', TC.URL.from_path(g, 'foo'));
      debug('44402', TC.URL.from_path(g, 'file', 'foo'));
      debug('44402', TC.URL.from_path(g, 'file', '../foo'));
      debug('44402', TC.URL.from_path(g, 'cache', 'foo'));
      debug('44402', TC.URL.from_path(g, 'test-data/f.template.coffee'));
      debug('44402', TC.URL.from_path(g, 'test-data/f.coffee'));
      debug('44402', TC.URL.from_path(g, 'test-data/f.js'));
      debug('44402', TC.URL.from_path(g, 'test-data/a.remplate.json'));
      debug('44402', TC.URL.from_path(g, 'test-data/a.json'));
      return;
      urls = {
        f_coffee_template: TC.URL.from_path(g, 'file', paths.f_coffee_template),
        f_coffee: TC.URL.from_path(g, 'file', paths.f_coffee),
        f_js: TC.URL.from_path(g, 'file', paths.f_js),
        a_json_template: TC.URL.from_path(g, 'file', paths.a_json_template),
        a_json: TC.URL.from_path(g, 'file', paths.a_json),
        f_cache: TC.URL.from_path(g, 'cache', 'f')
      };
      debug(paths);
      debug(urls);
      TC.register(g, urls.f_coffee, urls.f_js, ['bash', 'coffee -o lib -c src']);
      TC.register(g, urls.f_js, urls.f_cache, ['advice', 'recalculate']);
      TC.register(g, urls.a_json, urls.f_cache, ['advice', 'recalculate']);
      FS.write_json(urls.a_json, {
        x: 42
      });
      FS.write(urls.f_coffee, "### some CS here ###");
      FS.write(urls.f_js, "/* some JS here */");
      warn('################# @1 #############################');
      info(f());
      urge('cache:\n' + rpr(FS.cache));
      warn((yield TC.find_first_fault(g, resume)));
      warn('################# @2 #############################');
      help("boxed chart:\n", TC.get_boxed_chart(g));
      help("boxed trend:\n", (yield TC.fetch_boxed_trend(g, resume)));
      FS.write(urls.f_coffee, "### some modified CS here ###");
      FS.write_json(urls.a_json, {
        x: 108
      });
      help("boxed trend:\n", (yield TC.fetch_boxed_trend(g, resume)));
      info(f());
      warn((yield TC.find_first_fault(g, resume)));
      urge((yield TC.find_faults(g, resume)));
      urge('cache:\n' + rpr(FS.cache));
      return null;
    });
  };

  if (module.parent == null) {
    main();
  }

}).call(this);

//# sourceMappingURL=demo.js.map
